generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String        @id @default(uuid())
  name        String        @unique
  users       StoreUser[]   @relation("StoreToUser")
  billboards  Billboard[]   @relation("StoreToBillboard")
  categories  Category[]    @relation("StoreToCategory")
  products    Product[]     @relation("StoreToProduct")
  subcategory Subcategory[] @relation("StoreToSubcategory")
  country     Country[]     @relation("StoreToCountry")
  orders      Order[]       @relation("StoreToOrder")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model StoreUser {
  id      String @id @default(uuid())
  storeId String 
  store   Store  @relation("StoreToUser", fields: [storeId], references: [id])
  userId  String

  @@index([storeId])
  @@index([userId])
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String     @unique
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard     @relation(fields: [billboardId], references: [id])
  name          String        @unique
  subcategories Subcategory[] @relation("CategoryToSubcategory")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id            String      @id @default(uuid())
  storeId       String
  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  name          String      @unique
  price         Decimal
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  subcategoryId String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  countryId     String
  country       Country     @relation(fields: [countryId], references: [id])
  images        Image[]
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
  @@index([subcategoryId])
  @@index([countryId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  clientId   String
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([clientId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  price     String
  quantity  Int

  @@index([orderId])
  @@index([productId])
}

model Subcategory {
  id         String    @id @default(uuid())
  storeId    String
  store      Store     @relation("StoreToSubcategory", fields: [storeId], references: [id])
  categoryId String
  category   Category  @relation("CategoryToSubcategory", fields: [categoryId], references: [id])
  name       String    @unique
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Country {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCountry", fields: [storeId], references: [id])
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
